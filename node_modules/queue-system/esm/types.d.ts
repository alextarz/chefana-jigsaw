import type { Task } from "./Task";
interface TaskFn<T> {
    (isCancelled: () => Promise<void>, cancelPromise: Promise<never>): T | Promise<T>;
}
interface PromisedTaskFn<T> {
    (isCancelled: () => Promise<void>, cancelPromise: Promise<never>): Promise<T>;
}
declare type FilterFn = (data: {
    [key: string]: unknown;
} | undefined, isRunning: boolean, isCancelled: boolean) => boolean;
declare type IsDestroyed = () => boolean;
interface QueueOptions {
    concurrency?: number;
    paused?: boolean;
}
interface QueueDestroyInfo {
    removed: Task<unknown>[];
    inProgress: Task<unknown>[];
}
declare type QueueFilterFunction = (data: unknown, isRunning: boolean, isCancelled: boolean) => boolean;
export type { TaskFn, PromisedTaskFn, FilterFn, IsDestroyed, QueueOptions, QueueDestroyInfo, QueueFilterFunction, };
//# sourceMappingURL=types.d.ts.map