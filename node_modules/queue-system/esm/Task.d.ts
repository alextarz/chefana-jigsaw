import type { Queue } from "./Queue.js";
import type { IsDestroyed, PromisedTaskFn } from "./types";
declare class Task<ReturnValueType = unknown> {
    private readonly _queue;
    private readonly _fn;
    private _cancelled;
    private _started;
    private readonly _id;
    data?: {
        [key: string]: unknown;
    };
    private readonly _promise;
    private readonly _cancelPromise;
    private _cancelReject?;
    private _cancelError?;
    private _resolve;
    private _reject;
    private readonly _isQueueDestroyed;
    start: typeof Task.prototype.run;
    constructor(queue: Queue, fn: PromisedTaskFn<ReturnValueType>, isQueueDestroyed: IsDestroyed);
    private _isCancelled;
    isCancelled(): boolean;
    cancel(): void;
    run(): Promise<void>;
    remove(): void;
    getPosition(): number;
    getWaitingPosition(): number;
    isRunning(): boolean;
    get id(): number;
    get promise(): Promise<ReturnValueType>;
}
export { Task };
//# sourceMappingURL=Task.d.ts.map