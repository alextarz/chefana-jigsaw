"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
let id;
id = 1;
const noop = () => undefined;
class Task {
    constructor(queue, fn, isQueueDestroyed) {
        this._resolve = noop;
        this._reject = noop;
        this._queue = queue;
        this._fn = fn;
        this._cancelled = false;
        this._started = false;
        this._id = id++;
        this._promise = new Promise((_resolve, _reject) => {
            this._resolve = _resolve;
            this._reject = _reject;
        });
        this._cancelPromise = new Promise((_resolve, _reject) => {
            this._cancelReject = (error) => {
                this._cancelError = error;
                _reject(error);
            };
        });
        this._isQueueDestroyed = isQueueDestroyed;
        this._cancelPromise.catch(noop);
        this.start = this.run;
        this.cancel = this.cancel.bind(this);
    }
    async _isCancelled() {
        if (this._cancelled) {
            return Promise.reject(this._cancelError);
        }
        return Promise.resolve();
    }
    isCancelled() {
        return this._cancelled;
    }
    cancel() {
        if (this._cancelled) {
            return;
        }
        this._cancelled = true;
        this._cancelReject(new Error("Task cancelled"));
        if (!this._started) {
            this.remove();
        }
    }
    run() {
        if (this._cancelled) {
            throw new Error("Task was cancelled.");
        }
        if (this._started) {
            throw new Error("Task already started.");
        }
        if (this._isQueueDestroyed()) {
            throw new Error("Task belongs to destroyed queue.");
        }
        this._started = true;
        return this._fn(this._isCancelled.bind(this), this._cancelPromise)
            .then(this._resolve, this._reject);
    }
    remove() {
        this._queue.remove(this);
    }
    getPosition() {
        return this._queue.getTaskPosition(this);
    }
    getWaitingPosition() {
        return this._queue.getTaskWaitingPosition(this);
    }
    isRunning() {
        return this._queue.isTaskRunning(this);
    }
    get id() {
        return this._id;
    }
    get promise() {
        return this._promise;
    }
}
exports.Task = Task;
//# sourceMappingURL=Task.js.map