#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const errors_js_1 = require("./errors.js");
const config_js_1 = require("./config.js");
const const_js_1 = require("./const.js");
const compressQueue_js_1 = require("./compressQueue.js");
const noop = () => undefined;
(0, yargs_1.default)(process.argv.slice(2))
    .scriptName("brotli-cli")
    .usage("This tool allows you to compress given files with Brotli compression.")
    .example("$0 compress -q 5 image.jpg", "Compress `image.jpg` file with generic compression level 5 and save to image.jpg.br")
    .example("$0 compress -q 5 -br false image.jpg", "Compress `image.jpg` file and overwrite it")
    .example("$0 compress -mode text index.html -", "Compress `index.html` file with text mode max compression (level 11) and print to stdout")
    .example(`$0 compress --glob "images/*.jpg"`, "Compress all jpg files from `images` directory, stop on first error.")
    .example(`$0 compress --glob --bail false "images/*.jpg"`, "Compress all jpg files from `images` directory, do not stop on first error "
    + "(will still print errors to std err and exit with error code).")
    .option("mode", {
    alias: "m",
    choices: const_js_1.modes,
    default: const_js_1.modes[0],
    description: "Brotli compression mode",
})
    .option("quality", {
    alias: "q",
    choices: const_js_1.quality,
    default: 11,
    description: "Brotli compression quality",
})
    .option("threads", {
    alias: "t",
    description: "Use this many concurrent jobs [number of threads or `true` for threads=CPUs amount]",
    default: true,
    coerce: (value) => {
        if (value === true) {
            return config_js_1.ALL_CPUS;
        }
        if (value === false) {
            return 1;
        }
        const isInt = Number.isInteger(Number(value));
        const num = Number(value);
        if (isInt) {
            if (num === 0) {
                return config_js_1.ALL_CPUS;
            }
            if (num < 0) {
                throw new TypeError("Threads amount must be positive");
            }
            return Number(value);
        }
        return config_js_1.ALL_CPUS;
    },
})
    .option("lgwin", {
    alias: "l",
    choices: const_js_1.windowSize,
    default: 24,
    description: "Brotli compression window size",
})
    .option("bail", {
    alias: "b",
    type: "boolean",
    default: true,
    description: "Stop execution on first error",
})
    .option("add-extension", {
    alias: "br",
    type: "boolean",
    default: true,
    description: "Add .br extension to compressed files",
})
    .option("glob", {
    alias: "g",
    type: "boolean",
    default: false,
    description: "Use glob pattern when matching files",
})
    .option("glob-skip-br-extension", {
    alias: "skip-br",
    type: "boolean",
    default: true,
    description: "Always skip .br extension when matching files",
})
    .option("verbose", {
    alias: "v",
    type: "boolean",
    default: false,
    description: "Run with verbose logging",
})
    .command("compress", "Compresses specified files", noop, async (argv) => {
    var _a, _b, _c;
    try {
        const list = argv._.slice(1).map(String);
        if (process.argv[2] === "compress" && process.argv[2] === list[0]) {
            list.shift();
        }
        const printToStdOut = !argv.glob && list.length === 2 && list[1] === "-";
        if (printToStdOut) {
            list.pop();
        }
        if (argv.v && argv.glob) {
            console.warn("Glob enabled, will match these patterns");
            list.forEach(pattern => {
                console.warn("  -", pattern);
            });
        }
        let files;
        if (argv.glob) {
            files = await (0, fast_glob_1.default)(list, { dot: true });
            if (argv.skipBr) {
                const filteredOut = [];
                files = files.filter(file => {
                    const isBr = file.endsWith(".br");
                    if (isBr) {
                        filteredOut.push(file);
                    }
                    return !isBr;
                });
                if (filteredOut.length && argv.v) {
                    console.warn("Filtered out", filteredOut.length, "matched .br files");
                    filteredOut.forEach(file => {
                        console.warn("  -", file);
                    });
                }
            }
        }
        else {
            files = list;
        }
        if (!files.length) {
            if (argv.glob) {
                throw new errors_js_1.NoFilesError("No files matched the pattern(s)");
            }
            throw new errors_js_1.NoFilesError("No files to compress");
        }
        if (argv.v) {
            if (argv.glob) {
                console.warn(`Matched those files (${files.length})`);
            }
            else {
                console.warn("Glob disabled, will try to compress these");
            }
            files.forEach(file => {
                console.warn("  -", file);
            });
            console.warn("");
            console.warn(`Starting compression with ${argv.threads} threads`);
        }
        else {
            console.warn(`Starting compression of ${files.length} files with ${argv.threads} threads if possible`);
        }
        const options = {
            mode: argv.mode,
            quality: argv.quality,
            windowSize: argv.lgwin,
            concurrency: argv.threads,
            bail: argv.bail,
            br: Boolean(argv.br),
            printToStdOut: printToStdOut,
            files: files,
        };
        await (0, compressQueue_js_1.compressQueue)(options, Boolean(argv.v));
        console.warn("OK");
    }
    catch (error) {
        if (error instanceof errors_js_1.CompressionProcessError) {
            if (argv.bail) {
                console.error("Error happened during compression process, the process is stopped.");
            }
            else {
                const errorsCount = (_a = error.details) === null || _a === void 0 ? void 0 : _a.list.length;
                console.error(`Some errors (${String(errorsCount)}) happened during compression process.`
                    + ` All other files finished successfully.`);
            }
            (_c = ((_b = error.details) === null || _b === void 0 ? void 0 : _b.list)) === null || _c === void 0 ? void 0 : _c.forEach((e) => {
                console.error("File:", e.file);
                console.error(e.error);
            });
        }
        else {
            console.error(error);
        }
        process.exit(1);
    }
})
    .command("*", false, noop, () => {
    yargs_1.default.showHelp();
    console.error();
    if (!process.argv[2]) {
        console.error("No command given, did you miss `compress` keyword?");
        return;
    }
    console.error("Unknown command, did you miss `compress` keyword?");
    process.exit(1);
})
    .strictOptions(true)
    .argv;
//# sourceMappingURL=index.js.map