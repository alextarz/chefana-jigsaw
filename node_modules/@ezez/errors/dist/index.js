"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaultOptions = exports.createError = void 0;
const index_js_1 = require("./utils/index.js");
const defaultOptions = {
    cleanStackTraces: false,
};
let globalDefaultOptions = {};
const setDefaultOptions = (options) => {
    globalDefaultOptions = options;
};
exports.setDefaultOptions = setDefaultOptions;
const createError = (name, ParentError = Error, options) => {
    const useOptions = Object.assign({}, defaultOptions, globalDefaultOptions, options);
    const CustomError = function CustomError(arg1, arg2, arg3) {
        if (!(this instanceof CustomError)) {
            return new CustomError(arg1, arg2, arg3);
        }
        const { sourceError, message, details } = (0, index_js_1.parseArguments)(arg1, arg2, arg3);
        const names = (0, index_js_1.enhanceToString)([name]);
        if (sourceError) {
            if ("names" in sourceError) {
                names.push(sourceError.names);
            }
            else {
                names.push((0, index_js_1.enhanceToString)((0, index_js_1.getPrototypesNames)(sourceError)));
            }
        }
        names.push(...(0, index_js_1.getPrototypesNames)(this));
        const useMessage = (0, index_js_1.getMessage)(sourceError, message);
        Object.defineProperties(this, {
            name: {
                configurable: true,
                enumerable: false,
                value: name,
                writable: true,
            },
            names: {
                configurable: true,
                enumerable: false,
                value: names,
                writable: true,
            },
            message: {
                configurable: true,
                enumerable: false,
                value: useMessage,
                writable: true,
            },
            details: {
                configurable: true,
                enumerable: false,
                value: (0, index_js_1.getDetails)(sourceError, details),
                writable: true,
            },
            stack: {
                configurable: true,
                enumerable: false,
                value: (0, index_js_1.cleanUpStack)(new Error().stack, name, useMessage, useOptions),
                writable: true,
            },
            ancestors: {
                configurable: true,
                get: () => {
                    const ancestors = [];
                    let currentError = this.parent;
                    while (currentError) {
                        ancestors.push(currentError);
                        currentError = currentError.parent;
                    }
                    return ancestors;
                },
            },
        });
        if (sourceError) {
            Object.defineProperty(this, "parent", {
                configurable: true,
                enumerable: false,
                value: sourceError,
                writable: true,
            });
        }
    };
    CustomError.extend = (name, options = {}) => createError(name, CustomError, options);
    CustomError.normalize = (maybeError, options = { mode: "strict" }) => {
        const normalized = new CustomError("Not an error: " + String(maybeError));
        if (!maybeError || typeof maybeError !== "object") {
            return normalized;
        }
        if (options.mode === "instanceof") {
            if (maybeError instanceof Error) {
                return maybeError;
            }
            return normalized;
        }
        const hasProperties = "name" in maybeError && "stack" in maybeError && "message" in maybeError;
        if (options.mode === "strict") {
            if (hasProperties
                && typeof maybeError.name === "string" && typeof maybeError.stack === "string"
                && typeof maybeError.message === "string" && maybeError.name.endsWith("Error")) {
                return maybeError;
            }
            return normalized;
        }
        if (hasProperties) {
            return maybeError;
        }
        return normalized;
    };
    CustomError.prototype = new ParentError();
    Object.defineProperty(CustomError, "name", {
        configurable: true,
        enumerable: false,
        value: name,
        writable: true,
    });
    return CustomError;
};
exports.createError = createError;
//# sourceMappingURL=index.js.map