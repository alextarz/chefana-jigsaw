const MAX_ARGUMENTS = 3;
const invalidArguments = () => {
    throw new TypeError("Invalid arguments passed into error");
};
const parseArguments = (...args) => {
    let sourceError, message, details;
    if (args.length > MAX_ARGUMENTS) {
        invalidArguments();
    }
    const useArgs = args.filter(a => a != null);
    const errors = useArgs.filter(a => a instanceof Error);
    const errorsLength = errors.length;
    if (errorsLength > 1) {
        invalidArguments();
    }
    const strings = useArgs.filter(a => typeof a === "string");
    const stringsLength = strings.length;
    if (stringsLength > 1) {
        invalidArguments();
    }
    const objects = useArgs.filter(a => typeof a === "object" && !(a instanceof Error));
    const objectsLength = objects.length;
    if (objectsLength > 1) {
        invalidArguments();
    }
    if (errorsLength) {
        sourceError = errors[0];
    }
    if (stringsLength) {
        message = strings[0];
    }
    if (objectsLength) {
        details = objects[0];
    }
    return {
        sourceError, message, details,
    };
};
export { parseArguments, };
//# sourceMappingURL=parseArguments.js.map