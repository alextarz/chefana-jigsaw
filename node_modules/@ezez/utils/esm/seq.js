const fail = function () {
    return Promise.reject(new TypeError("At least one function must be provided."));
};
const run = (list, earlyBreaker) => {
    if (!list.length) {
        return fail();
    }
    const promises = [...list];
    return new Promise((resolve, reject) => {
        let promise = Promise.resolve(undefined);
        const errors = [];
        const doTry = function (error) {
            if (error !== undefined && earlyBreaker && earlyBreaker(error)) {
                reject(error);
                return;
            }
            if (error) {
                errors.push(error);
            }
            const fn = promises.shift();
            if (typeof fn !== "function") {
                const finalError = new Error("Every function had thrown.");
                finalError.details = { errors };
                reject(finalError);
            }
            promise = (promise.then(fn).then(resolve, doTry));
        };
        doTry();
    });
};
const seqEarlyBreak = (earlyBreaker, ...args) => {
    if (args.length === 1) {
        return run(Array.isArray(args[0]) ? args[0] : [args[0]], earlyBreaker);
    }
    return run(args, earlyBreaker);
};
const seq = (...fns) => {
    return seqEarlyBreak(undefined, ...fns);
};
export { seq, seqEarlyBreak };
//# sourceMappingURL=seq.js.map