const isObject = (value) => (typeof value === "object" || typeof value === "function") && value !== null;
const clone = (value) => {
    if (Array.isArray(value)) {
        return [...value];
    }
    return { ...value };
};
const hasOnlyValidPathParts = (array) => {
    if (!array.length) {
        return false;
    }
    return array.every(item => {
        const type = typeof item;
        return (type === "string" && item !== "") || type === "number";
    });
};
const getPathParts = (path) => {
    if (typeof path === "number") {
        return [String(path)];
    }
    if (typeof path === "string") {
        return path.split(".");
    }
    if (Array.isArray(path)) {
        return path;
    }
    throw new TypeError("Path must be a string, a number or an array of strings and numbers");
};
const setImmutable = (source, path, value) => {
    const pathParts = getPathParts(path);
    const isValidPath = hasOnlyValidPathParts(pathParts);
    if (!isValidPath) {
        throw new TypeError("Path must not be empty or contain empty parts");
    }
    const len = pathParts.length;
    const result = isObject(source) ? clone(source) : {};
    let current = result;
    for (let i = 0; i < len; i++) {
        const isLast = i === len - 1;
        const key = pathParts[i];
        if (isLast) {
            current[key] = value;
            return result;
        }
        if (!isObject(current[key])) {
            current[key] = {};
        }
        else {
            current[key] = clone(current[key]);
        }
        current = current[key];
    }
    return result;
};
export { setImmutable };
//# sourceMappingURL=setImmutable.js.map