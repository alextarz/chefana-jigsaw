interface Opts {
    leading?: boolean;
    trailing?: boolean;
}
interface Extras {
    cancel: () => void;
    flush: () => void;
}
type CanReturnUndefined<F extends (...args: any[]) => any> = (...args: Parameters<F>) => ReturnType<F> | undefined;
declare const throttle: <RT, F extends (...args: any[]) => RT>(fn: F, time?: number | [number, ...number[]], options?: Opts) => CanReturnUndefined<F> & Extras;
export { throttle, };
export type { Extras as ThrottledFunctionExtras, Opts as ThrottleOptions, CanReturnUndefined as ThrottledFunction, };
//# sourceMappingURL=throttle.d.ts.map